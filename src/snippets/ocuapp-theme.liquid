{% comment %}
  Updated: 2020/09/08
{% endcomment %}

{% unless ocuapp %}
{% capture upsell_cart_includes %}
{% assign upsellapp_tags = shop.metafields.zipifyocu.oneclickupsell.tags %}
{% assign upsellapp_variants = shop.metafields.zipifyocu.oneclickupsell.variants %}
{% assign upsellapp_proxy_url = shop.metafields.zipifyocu.oneclickupsell.proxy_url %}
{% assign skip_cart = shop.metafields.zipifyocu.oneclickupsell.skip_cart %}
{% assign fi = shop.metafields.zipifyocu.oneclickupsell.fi %}
{% assign amazon_pay = shop.metafields.zipifyocu.oneclickupsell.amazon_pay %}
{% assign incarts = shop.metafields.zipifyocu.oneclickupsell.incarts | json %}

{% unless skip_cart == 'true' %}
  {% assign skip_cart = 'false' %}
{% endunless %}

{% if shop.metafields.subscriptions.subscription_active == 'true' %}
  {% assign subscription_app_enabled = 'true' %}
  {% if shop.metafields.zipifyocu.oneclickupsell.recharge == 'true' %}
    {% assign integrate_with_recharge = 'true' %}
  {% else %}
    {% assign integrate_with_recharge = 'false' %}
  {% endif %}
{% else %}
  {% assign subscription_app_enabled = 'false' %}
{% endif %}

{% assign product_tags = '' | split: ',' %}
{% assign subscription_products = '' | split: ',' %}
{% assign subscription_variants = '' | split: ',' %}
{% assign cart_products = '' | split: ',' %}
{% assign all_cart_collections = '' | split: ',' %}
{% assign customer_id = '"' | append: customer.id | append: '"' %}
{% assign needed_product_fields_names = 'id,title,handle,featured_image,tags,vendor,type,published_at' | split: ',' %}
{% assign needed_variant_fields_names = 'id,title,price,price_min,price_max,price_varies,taxable,weight,requires_shipping,inventory_policy,inventory_quantity,inventory_management,sku,compare_at_price,compare_at_price_varies,compare_at_price_min,compare_at_price_max,images,options,content' | split: ',' %}
{% assign needed_collection_fields_names = 'id,title,handle' | split: ',' %}

{% for cart_item in cart.items %}
{% if cart_item.product %}
  {% assign upsell_item_product = cart_item.product %}
{% else %}
  {% assign upsell_item_product = cart_item %}
{% endif %}

{% assign product_variants_json_list = '' | split: ',' %}

{% for product_variant in upsell_item_product.variants %}
  {% assign product_variant_json = '' | split: ',' %}

  {% for variant_field_name in needed_variant_fields_names %}
    {% assign variant_field_value = product_variant[variant_field_name] | json %}
    {% assign variant_field_json = '"' | append: variant_field_name | append: '":' | append: variant_field_value | split: '---upsellapp_separator---' %}
    {% assign product_variant_json = product_variant_json | concat: variant_field_json %}
  {% endfor %}

  {% assign product_variant_json = product_variant_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
  {% assign product_variants_json_list = product_variants_json_list | concat: product_variant_json %}
{% endfor %}

{% assign product_variants_json_list = product_variants_json_list | join: ',' | prepend: '[' | append: ']' %}
{% assign product_json = '' | split: ',' %}

{% for product_field_name in needed_product_fields_names %}
  {% assign product_field_value = upsell_item_product[product_field_name] | json %}
  {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
  {% assign product_json = product_json | concat: product_field_json %}
{% endfor %}

{% assign product_field_name = 'collection_ids' %}
{% assign product_field_value = upsell_item_product.collections | map: 'id' | join: ',' | json  %}
{% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
{% assign product_json = product_json | concat: product_field_json %}
{% assign product_field_name = 'variants' %}
{% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_variants_json_list | split: '---upsellapp_separator---' %}
{% assign product_json = product_json | concat: product_field_json %}
{% assign product_json = product_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
{% assign product_tags = product_tags | concat: upsell_item_product.tags %}
{% assign cart_products = cart_products | concat: product_json %}
{% assign all_cart_collections = all_cart_collections | concat: upsell_item_product.collections %}

{% if cart_item.product %}
  {% assign cart_item_id = '' | append: cart_item.id %}

  {% if subscription_app_enabled %}
      {% for p in cart_item.properties %}
        {% if p.first == 'shipping_interval_frequency' %}
          {% assign subscription_product = all_products[upsell_item_product.metafields.subscriptions.original_handle] %}
          {% if subscription_product %}
            {% assign product_tags = product_tags | concat: subscription_product.tags %}

            {% assign product_field_name = 'collection_ids' %}
            {% assign product_field_value = subscription_product.collections | map: 'id' | join: ',' | json  %}
            {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value %}

            {% assign subscription_product_json = subscription_product | json %}
            {% assign size = subscription_product_json | size | minus: 1 %}
            {% assign subscription_product_json = subscription_product_json | slice: 0, size | append: ',' | append: product_field_json | append: '}' %}
            {% assign subscription_product_json = subscription_product_json | split: '---upsellapp_separator---' %}

            {% assign cart_products = cart_products | concat: subscription_product_json %}

            {% for subscription_variant in subscription_product.variants %}
              {% if subscription_variant.metafields.subscriptions.discount_variant_id == cart_item_id  %}
                {% assign subscription_variants = subscription_variants | concat: subscription_variant_relation %}
                {% assign subscription_product_relation = cart_item.product_id | append: '_' | append: subscription_product.id | split: ','  %}
                {% assign subscription_products = subscription_products | concat: subscription_product_relation %}
                {% assign subscription_products_tags = subscription_products_tags | append: cart_item.variant_id | append: '_' | append: subscription_product.tags | join: ',' | append: ';' %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endif %}
      {% endfor %}
  {% endif %}

{% else %}
  {% if subscription_app_enabled and product.metafields.subscriptions.subscription_id %}
    {% assign subscription_product_relation = product.metafields.subscriptions.discount_product_id | append: '_' | append: product.id | split: ','  %}
    {% assign subscription_products = subscription_products | concat: subscription_product_relation %}
  {% endif %}
{% endif %}
{% endfor %}

{% if template.name == 'product' %}
  {% assign product_id_size = '' | append: product.id | strip | size %}
  {% if product_id_size > 0 %}
    {% if cart_item.product %}
  {% assign upsell_item_product = cart_item.product %}
{% else %}
  {% assign upsell_item_product = cart_item %}
{% endif %}

{% assign product_variants_json_list = '' | split: ',' %}

{% for product_variant in upsell_item_product.variants %}
  {% assign product_variant_json = '' | split: ',' %}

  {% for variant_field_name in needed_variant_fields_names %}
    {% assign variant_field_value = product_variant[variant_field_name] | json %}
    {% assign variant_field_json = '"' | append: variant_field_name | append: '":' | append: variant_field_value | split: '---upsellapp_separator---' %}
    {% assign product_variant_json = product_variant_json | concat: variant_field_json %}
  {% endfor %}

  {% assign product_variant_json = product_variant_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
  {% assign product_variants_json_list = product_variants_json_list | concat: product_variant_json %}
{% endfor %}

{% assign product_variants_json_list = product_variants_json_list | join: ',' | prepend: '[' | append: ']' %}
{% assign product_json = '' | split: ',' %}

{% for product_field_name in needed_product_fields_names %}
  {% assign product_field_value = upsell_item_product[product_field_name] | json %}
  {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
  {% assign product_json = product_json | concat: product_field_json %}
{% endfor %}

{% assign product_field_name = 'collection_ids' %}
{% assign product_field_value = upsell_item_product.collections | map: 'id' | join: ',' | json  %}
{% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
{% assign product_json = product_json | concat: product_field_json %}
{% assign product_field_name = 'variants' %}
{% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_variants_json_list | split: '---upsellapp_separator---' %}
{% assign product_json = product_json | concat: product_field_json %}
{% assign product_json = product_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
{% assign product_tags = product_tags | concat: upsell_item_product.tags %}
{% assign cart_products = cart_products | concat: product_json %}
{% assign all_cart_collections = all_cart_collections | concat: upsell_item_product.collections %}

{% if cart_item.product %}
  {% assign cart_item_id = '' | append: cart_item.id %}

  {% if subscription_app_enabled %}
      {% for p in cart_item.properties %}
        {% if p.first == 'shipping_interval_frequency' %}
          {% assign subscription_product = all_products[upsell_item_product.metafields.subscriptions.original_handle] %}
          {% if subscription_product %}
            {% assign product_tags = product_tags | concat: subscription_product.tags %}

            {% assign product_field_name = 'collection_ids' %}
            {% assign product_field_value = subscription_product.collections | map: 'id' | join: ',' | json  %}
            {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value %}

            {% assign subscription_product_json = subscription_product | json %}
            {% assign size = subscription_product_json | size | minus: 1 %}
            {% assign subscription_product_json = subscription_product_json | slice: 0, size | append: ',' | append: product_field_json | append: '}' %}
            {% assign subscription_product_json = subscription_product_json | split: '---upsellapp_separator---' %}

            {% assign cart_products = cart_products | concat: subscription_product_json %}

            {% for subscription_variant in subscription_product.variants %}
              {% if subscription_variant.metafields.subscriptions.discount_variant_id == cart_item_id  %}
                {% assign subscription_variants = subscription_variants | concat: subscription_variant_relation %}
                {% assign subscription_product_relation = cart_item.product_id | append: '_' | append: subscription_product.id | split: ','  %}
                {% assign subscription_products = subscription_products | concat: subscription_product_relation %}
                {% assign subscription_products_tags = subscription_products_tags | append: cart_item.variant_id | append: '_' | append: subscription_product.tags | join: ',' | append: ';' %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endif %}
      {% endfor %}
  {% endif %}

{% else %}
  {% if subscription_app_enabled and product.metafields.subscriptions.subscription_id %}
    {% assign subscription_product_relation = product.metafields.subscriptions.discount_product_id | append: '_' | append: product.id | split: ','  %}
    {% assign subscription_products = subscription_products | concat: subscription_product_relation %}
  {% endif %}
{% endif %}
{% endif %}
{% endif %}

{% assign cart_collections = '' | split: ',' %}
{% for cart_collection in all_cart_collections %}
{% assign cart_collection_json = '' | split: ',' %}

{% for collection_field_name in needed_collection_fields_names %}
  {% assign collection_field_value = cart_collection[collection_field_name] | json %}
  {% assign collection_field_json = '"' | append: collection_field_name | append: '":' | append: collection_field_value | split: '---upsellapp_separator---' %}
  {% assign cart_collection_json = cart_collection_json | concat: collection_field_json %}
{% endfor %}

{% assign collection_rules_size = cart_collection | json | split: '"rules":' | size %}
{% assign collection_field_name = 'collection_type' %}
{% assign collection_field_value = 'custom' | json %}

{% if collection_rules_size > 1 %}
  {% assign collection_field_value = 'smart' | json %}
{% endif %}

{% assign collection_field_json = '"' | append: collection_field_name | append: '":' | append: collection_field_value | split: '---upsellapp_separator---' %}
{% assign cart_collection_json = cart_collection_json | concat: collection_field_json %}
{% assign cart_collection_json = cart_collection_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
{% assign cart_collections = cart_collections | concat: cart_collection_json %}
{% endfor %}

{% assign product_tags = product_tags | uniq %}
{% assign upsell_cart_include_subscription_upsells = 'false' %}
{% assign upsell_cart_include_upsells = 'false' %}
{% assign disabled_by_subscription_app = 'false' %}

{% if subscription_app_enabled and subscription_products.size > 0 and integrate_with_recharge != 'true' %}
 {% assign disabled_by_subscription_app = 'true' %}
{% endif %}

{% if subscription_app_enabled and subscription_variants.size > 0 %}
  {% if integrate_with_recharge != 'true' %}
    {% assign disabled_by_subscription_app = 'true' %}
  {% endif %}
{% endif %}

{% for tag_raw in product_tags %}
  {% assign tag = tag_raw | downcase %}
  {% if upsellapp_tags contains tag %}
    {% assign upsell_cart_include_subscription_upsells = 'true' %}
  {% endif %}
{% endfor %}

{% assign subscription_products_json = subscription_products | uniq | join: ',' %}
{% assign cart_products_json = cart_products | uniq | join: ',' %}
{% assign cart_collections_json = cart_collections | uniq | join: ',' %}

{% assign cart_variants_json = '' %}
{% for item in cart.items %}
{% assign cart_item = item | json | append: ',' %}
  {% assign cart_variants_json = cart_variants_json | append: cart_item %}
{% endfor %}

{% if subscription_products_tags.size > 0 %}
  {% assign is_precheckout = true %}
{% endif %}

{% assign needed_cart_items_fields = 'product_id,variant_id,quantity,grams,price,line_price,title,properties,vendor,sku' | split: ',' %}

{% for cart_item in cart.items %}
  {% assign cart_items_json = '' | split: ',' %}
  {% for cart_item_field_name in needed_cart_items_fields %}
    {% assign cart_item_field_value = cart_item[cart_item_field_name] | json %}
    {% assign cart_item_field_json = '"' | append: cart_item_field_name | append: '":' | append: cart_item_field_value | split: '---upsellapp_separator---' %}
    {% assign cart_items_json = cart_items_json | concat: cart_item_field_json %}
  {% endfor %}
  {% assign cart_items_json = cart_items_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
  {% assign cart_items_json_list = cart_items_json_list | concat: cart_items_json %}
{% endfor %}
{% assign cart_items_json_list = cart_items_json_list | join: ',' | prepend: '[' | append: ']' %}

{% assign cart_json = cart | json %}

{% endcapture %}

<style>.ocu-hidden.ocu-hidden.ocu-hidden,.bold_hidden.bold_hidden.bold_hidden{display:none !important}</style>
<script>
!function(){
if (window.performance) {
    const navEntries = window.performance.getEntriesByType && window.performance.getEntriesByType('navigation');
    if (navEntries && navEntries.length > 0 && navEntries[0].type === 'back_forward') {
      location.reload();
    } else if (window.performance.navigation && window.performance.navigation.type === window.performance.navigation.TYPE_BACK_FORWARD) {
      location.reload();
    }
}

!function(){var e=[];window.Promise||e.push("Promise"),window.URLSearchParams||e.push("URL"),Element.prototype.closest||e.push("Element.prototype.closest"),Array.from||e.push("Array.from"),Object.assign||e.push("Object.assign");try{new Event("event")}catch(t){e.push("Event")}try{Symbol}catch(t){e.push("Symbol")}if(e.length){var t=document.createElement("script");t.src="https://cdn.polyfill.io/v3/polyfill.min.js?features="+e.join(",")+"&flags=gated",t.async=!0,document.head.appendChild(t)}Object.setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e}}();

var ajax,utils={store:Object.freeze(new Store),cookie:{options:{expires:86400,path:"/",encodeValue:!1},get:function(e){var t=document.cookie.match(new RegExp("(?:^|; )"+e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return t?decodeURIComponent(t[1]):void 0},set:function(e,t,n){var i=(n=n||this.options).expires;if("number"==typeof i&&i){var r=new Date;r.setTime(r.getTime()+1e3*i),i=n.expires=r}i&&i.toUTCString&&(n.expires=i.toUTCString());var o=e+"="+(t=encodeURIComponent(t));for(var s in n){o+="; "+s;var a=n[s];!0!==a&&(o+="="+a)}document.cookie=o},remove:function(e){this.set(e,null,{expires:-1})}},queryParams:function(e){var t={};return e.replace("?","").split("&").forEach(function(e){var n=e.split("=")[0],i=e.split("=")[1];t[n]=decodeURIComponent(i)}),t},shareableDiscount:function(e){e=e||{};var t=utils.queryParams(location.search)[e.key||"discount"];t&&(utils.cookie.set(e.name||"ocu-share-discount",t,utils.cookie.options),!e.clear||history.pushState(null,null,location.href.replace(/\?.+/,"")))},serializeForm:function(e){return new URLSearchParams(new FormData(e).fd || new FormData(e)).toString()},serializeFormEdge:function(e){var t,n=[];if("object"==typeof e&&"FORM"==e.nodeName){var r=e.elements.length;for(i=0;i<r;i++)if((t=e.elements[i]).name&&!t.disabled&&"file"!=t.type&&"reset"!=t.type&&"submit"!=t.type&&"button"!=t.type)if("select-multiple"==t.type)for(j=e.elements[i].options.length-1;j>=0;j--)t.options[j].selected&&(n[n.length]=encodeURIComponent(t.name)+"="+encodeURIComponent(t.options[j].value));else("checkbox"!=t.type&&"radio"!=t.type||t.checked)&&(n[n.length]=encodeURIComponent(t.name)+"="+encodeURIComponent(t.value))}return n.join("&").replace(/%20/g,"+")},serialize:function(e,t,n,i){if(this.helpers.isFormData(t)&&(i=n,n=t,t=null),(t=t||{}).indices=t.indices||!1,n=n||new URLSearchParams,this.helpers.isUndefined(e))return n;if(this.helpers.isNull(e))n.append(i,"");else if(this.helpers.isArray(e))if(e.length)e.forEach(function(e,r){var o="object"==typeof e,s=i+"["+(t.indices&&o?r:"")+"]";this.serialize(e,t,n,s)}.bind(this));else{var r=i+"[]";n.append(r,"")}else this.helpers.isDate(e)?n.append(i,e.toISOString()):!this.helpers.isObject(e)||this.helpers.isFile(e)||this.helpers.isBlob(e)?n.append(i,e):Object.keys(e).forEach(function(r){var o=e[r];if(this.helpers.isArray(o))for(;2<r.length&&r.lastIndexOf("[]")===r.length-2;)r=r.substring(0,r.length-2);var s=i?i+"["+r+"]":r;this.serialize(o,t,n,s)}.bind(this));return n},inArray:function(e,t,n){return e.some(function(e){return e[t]===n})},filterObject:function(e,t){return t.reduce(function(t,n){return t[n]=e[n],t},{})},helpers:{isUndefined:function(e){return void 0===e},isNull:function(e){return null===e},isObject:function(e){return e===Object(e)},isArray:function(e){return Array.isArray(e)},isDate:function(e){return e instanceof Date},isBlob:function(e){return e&&"number"==typeof e.size&&"string"==typeof e.type&&"function"==typeof e.slice},isFile:function(e){return this.isBlob(e)&&("object"==typeof e.lastModifiedDate||"number"==typeof e.lastModified)&&"string"==typeof e.name},isFormData:function(e){return e instanceof FormData}}};

window.OCUIncart = {
    cart_items: {{ cart.items | json}},
    cart_products_json: JSON.parse({{ cart_products_json | prepend: '[' | append: ']' | json }}),
    cart_variants_json: [{{ cart_variants_json }}],
    incarts: {{ shop.metafields.zipifyocu.oneclickupsell.incarts | json }},
    subscription_tags: '{{ subscription_products_tags | url_encode | replace: "%27", "%5C%27" | url_decode }}',
    proxy_url: '{{ shop.metafields.zipifyocu.oneclickupsell.proxy_url }}',
    money_format: '{{ shop.money_format | url_encode | replace: "%27", "%5C%27" | url_decode }}',
    settings: {{ shop.metafields.zipifyocu.oneclickupsell.popup_settings | json }},
    option_selection: '{{ 'option_selection.js' | shopify_asset_url }}',
    is_precheckout: false,

    get tags() {
        const tags = {{ upsellapp_tags }};
        return tags && tags.pre_checkout.map(function(tag) { return tag.toLowerCase(); });
    },

    get variants() {
        const variants = {{ upsellapp_variants }};
        return variants && variants.pre_checkout;
    },

    cartContainsPrecheckoutTriggers: function(collection, productTriggers, product) {
        var self = this;
        let triggers = '';

        collection.forEach(function(trigger) {
          if (!~productTriggers.indexOf(trigger)) return;

          var items = self.cart_items.filter(function(item) {
            return item.product_id === product.id;
          });

          if (items[0]) {
            triggers += items[0].variant_id + ':' + trigger + ',';
          }

          self.is_precheckout = true;
          return triggers

        });

        return triggers
    },

    get triggers() {
        var self = this;
        var triggers = '';

        self.cart_items.forEach(function(item) {
            var product_id = item.product_id;

            self.cart_products_json.forEach(function(product) {
                const productVariants = product.variants && product.variants.map(function(variant) { return variant.id });
                const productTags = product.tags && product.tags.map(function(tag) { return tag.toLowerCase(); });

                if (!productTags) return;
                if (!Array.isArray(self.tags) && !Array.isArray(self.variants)) return;

              	triggers += self.cartContainsPrecheckoutTriggers(self.variants, productVariants, product);
              	triggers += self.cartContainsPrecheckoutTriggers(self.tags, productTags, product);
            })
        });

        return triggers;
    }
};

var lqd = {
    cart: {{ cart | json }},
    path: '{{ fi }}' === 'true' ? 'd56719fefdd75e95ba06caea3d9a3732' : '5965fedc7708e03e1024db4bf2ed5fe6',
    template_name: '{{ template.name }}',
    shop_currency: '{{ shop.currency }}',
    upsellapp_tags: {{ upsellapp_tags }},
    upsellapp_variants: {{ upsellapp_variants }},
    skip_cart: {{ skip_cart }},
    cart_products_json: JSON.parse({{ cart_products_json | prepend: '[' | append: ']' | json }}),
    cart_collections_json: [{{ cart_collections_json }}],
    cart_variants_json: [{{ cart_variants_json }}],
    customer_id: {{ customer_id }},
    customer: { id: {{ customer_id }}, email: '{{ customer.email }}' },
    proxy_url: '{{ upsellapp_proxy_url }}',
    permanent_domain: '{{ shop.permanent_domain }}',
    current_domain: '{{ request.host }}',
    disabled_by_subscription_app: {{ disabled_by_subscription_app }},
    subscription_app_enabled: {{ subscription_app_enabled }},
    subscription_products_json: '{{ subscription_products_json }}',
    subscription_variants_json: '{{ subscription_variants_json }}',
    subscription_products_size: {{ subscription_products.size }},
    integrate_with_recharge: '{{ integrate_with_recharge }}' === 'true',
    product: {{ product | json }},
    product_tags: {{ product_tags | json }},
    amazon_pay: '{{ amazon_pay }}' === 'true',
    themePopup: '{{ settings.cross_sell }}' === 'true' || '{{ settings.upsell_popup_enable }}' === 'true',
    themeSkipCart: '{{ settings.cart_action }}' === 'redirect_checkout'
        || '{{ settings.enable_product_cart_skip }}' === 'true'
        || '{{ settings.atc_cart_style }}' === 'skip_cart',

    get is_precheckout() {
        OCUIncart.triggers;
        return OCUIncart.is_precheckout || OCUIncart.subscription_tags;
    },

    get precheckout_tags() {
        return this.upsellapp_tags.pre_checkout;
    },

    get precheckout_variants() {
        return this.upsellapp_variants.pre_checkout;
    },

    get postcheckout_tags() {
        return this.upsellapp_tags.post_checkout.map(function(tag) { return tag.toLowerCase(); });
    },

    get postcheckout_variants() {
        return this.upsellapp_variants.post_checkout;
    },

    get upsell_cart_include_subscription_upsells() {
        var self = this;

        var hasSubscription = this.product_tags.reduce(function(acc, tag) {
            return acc || ~self.postcheckout_tags.indexOf(tag.toLowerCase());
        }, false);

        return hasSubscription;
    },

    get upsell_cart_include_upsells() {
        var self = this;
        var upsellapp_triggers = {
            pre_checkout: self.precheckout_tags.concat(self.precheckout_variants),
            post_checkout: self.postcheckout_tags.concat(self.postcheckout_variants)
        };

        return self.upsell_cart_include_subscription_upsells || Object.keys(self.upsellapp_tags).reduce(function(acc, key) {
            if (acc) return acc;

            if (!self.cart_products_json.length && self.template_name === 'product') {
                const productVariants = self.product.variants.map(function(variant) { return variant.id });
                const productTags = self.product.tags.map(function(tag) { return tag.toLowerCase(); });

                if (!Array.isArray(self.upsellapp_tags[key])) return false;

                return upsellapp_triggers[key].reduce(function(acc, trigger) {
                    if (acc) return acc;

                    if (typeof trigger === 'number') return !!~productVariants.indexOf(trigger);

                    return !!~productTags.indexOf(trigger.toLowerCase());
                }, false);
            }

            return self.cart_products_json.reduce(function(acc, product) {
                if (acc || !Array.isArray(self.upsellapp_tags[key])) return acc;

                const productVariants = product.variants.map(function(variant) { return variant.id });
                const productTags = product.tags.map(function(tag) { return tag.toLowerCase(); });

                return upsellapp_triggers[key].reduce(function(acc, trigger) {
                    if (acc) return acc;

                    if (typeof trigger === 'number') return !!~productVariants.indexOf(trigger);

                    return !!~productTags.indexOf(trigger.toLowerCase());
                }, false)
            }, false);
        }, false);
    },

    get incarts() {
        return {{ incarts }};
    },
    get is_ajax_precheckout() {
        var isIncarts = Object.keys(this.incarts).some(function(key) {
           return Object.keys(this.incarts[key]).length;
        }.bind(this));

        if (!isIncarts) return;

         var tags = utils.store.get('tags') || [];
         var isIncludes = Array.isArray(lqd.precheckout_tags) && lqd.precheckout_tags.some(function(tag) {
            return ~tags.indexOf(tag);
         });

        return isIncludes;
    },
    get isThemePopupTag() {
        return this.product && this.product.tags.some(function(tag) {
            return /cross-sell-\d/.test(tag);
        });
    },
    get isSkipCartPage() {
        return /index|collection|product/.test(this.template_name);
    },
    get isSkipCartCondition() {
        return (this.skip_cart || this.themeSkipCart) && this.isSkipCartPage && !this.isThemePopupTag;
    }
};

lqd.cart_products_json = lqd.cart_products_json.filter(function(item) {
    return item.handle && !item.error;
});

utils.shareableDiscount({ clear:false });

if (lqd.is_precheckout) requireOptionSelectors();

var ocuCdn="https://cdn07.zipify.com";!function(){if("cart"===lqd.template_name&&lqd.upsell_cart_include_upsells){var e;e=utils.store.get("fallback").timeout,c=setTimeout(s.bind(null,!0),e),s(!1);var n="https://cdn09.zipify.com",o=document.createElement("script"),a=document.createElement("link"),c=null;0;var t=document.createElement("script");t.src="https://zipify-ocu.s3.amazonaws.com/ocu/production/assets/"+lqd.path+"/build_number.js?ts="+Date.now(),t.onload=function(){var e=window.OCU_assets_build_number,t=n+"/"+lqd.path+"/assets."+e+".js",c=document.createElement("script");document.head.appendChild(c),c.src=t,c.onload=function(e){var t=window.ocu_precheckout_assets;o.src=t["precheckout.js"],a.href=t["precheckout.css"],l(o,a)}},document.head.appendChild(t)}function l(e,t){e.onload=function(){s(!0),clearTimeout(c)},t.rel="stylesheet",document.head.appendChild(e),document.head.appendChild(t)}function s(t){var e=document.querySelectorAll(utils.store.get("ocuSelectors"));Array.prototype.forEach.call(e,function(e){e.disabled=!t})}}();
function Application() {
    ajax = axios.create({ timeout: 8000 });
    ajax.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

    new PublicMethod();
    new SkipCart();
    new HistoryApi();

    this.setAttributes();
}

Application.prototype = {
    checkout: null,
    ocuSelectors: utils.store.get('ocuSelectors'),
    integrations: new Integrations(),
    helpers: new Helpers(),
    verify: new Verify(),
    cart: new Cart(),

    setAttributes: function() {
        this.integrations.smar7();
        if (
            !lqd.upsell_cart_include_upsells
            && !this.helpers.isOfferProduct()
            && !lqd.integrate_with_recharge && !lqd.subscription_products_size
            && lqd.template_name === 'cart') return;

        const forEach = Array.prototype.forEach;
        const checkoutButtons = document.querySelectorAll(this.ocuSelectors);
        const links = document.querySelectorAll('a'); // for ios

        forEach.call(checkoutButtons, function(item) {
            item.dataset.ocuCheckout = true;
        });

        setTimeout(function() {
            var checkoutBtn = document.querySelector('[data-ocu-checkout]');
            if (checkoutBtn) checkoutBtn.style.display = 'inline-block';
        });

        forEach.call(checkoutButtons, function(item) {
            item.dataset.disableRecharge = true;
        });

        forEach.call(links, function(link) {
            var isNeededHref = utils.store.get('permalink').test(link.href);
            if (isNeededHref) link.dataset.ocuCheckoutLink = true;
        });

        // if (lqd.amazon_pay) {
        //     window.onAmazonLoginReady = this.integrations.amazonPay;
        //     if (window.onAmazonLoginReady && !utils.store.get('amazonPayInitiated')) this.integrations.amazonPay(this);
        // }

        this.listenEvents();
    },

    check: function(event, target) {
        event.preventDefault();
        event.stopPropagation();

        var form = target.closest('[action="/cart"], [action="/checkout"]');
        if (form && !this.validate(form)) {
            clearTimeout(utils.store.get('fallback').id);
            utils.store.set('submitted', false);
            return form.reportValidity();
        }
        if (!utils.store.get('cartChanged')) return this.handle(target);

        utils.store.listen('cartChanged').then(function() {this.handle(target)}.bind(this));
    },

    handle: function(target) {
        this.integrations.discounts();

        if (utils.store.get('checkoutButtonState')) return;
        // if (utils.store.get('submitted')) return; // TODO fix_ff_multi_requests_2384
        utils.store.set('checkoutButtonState', true);

        this.helpers.payPal(target);
        this.verify.init(target);
    },

    init: function(event, target) {
        var self = this;

        if (lqd.template_name === 'cart' && utils.store.get('submitted')) {
            event.stopPropagation();
            return event.preventDefault();
        }
        utils.store.set('submitted', true);

        this.fallbackRedirect();

        if (window.RevyApp) this.handleMonkeyPatching();

        if (!this.allowUpsells(target)) return;

        if (lqd.template_name === 'product' && target.name === 'add' && !target.closest('form[action^="/cart/add"]')) {
            event.preventDefault();
            event.stopPropagation();
            const form = document.querySelector('form[action^="/cart/add"]');
            return form.submit();
        }

        if ((utils.store.get('amazonPayInitiated') || lqd.is_precheckout) && !utils.cookie.get('ocu_shown_popup') && lqd.template_name === 'cart') {
            event.preventDefault();
            event.stopPropagation();
            if (utils.store.get('amazonPayInitiated')) return null;

            const form = target.closest('[action="/cart"], [action="/checkout"]');
            if (form && !this.validate(form)) {
                clearTimeout(utils.store.get('fallback').id);
                utils.store.set('submitted', false);
                return form.reportValidity();
            }

            const isRechargeEnabled = lqd.integrate_with_recharge && !lqd.disabled_by_subscription_app;

            if (!window.OCUPrecheckout) return this.check(event, target);

            const precheckoutConfig = {
                utils: utils,
                Updater: Updater,
                is_recharge_enabled: isRechargeEnabled
            };

            return OCUPrecheckout(precheckoutConfig);
        }

        if (target.dataset.customBuyNow) {
            event.preventDefault();
            event.stopPropagation();

            var id = target.dataset.varientId;
            var qty = target.dataset.itemQuantity;
            var data = { id: id, quantity: qty };
            var handle = function() { self.checkout({ redirect:true }) };
            var onError = function() { alert('Network Error') };

            this.cart.add(null, null, data).then(handle).catch(onError);
        }

        var isIPhone = /iPhone/.test(navigator.userAgent);
        var isSmar7 = window.SMAR7 && SMAR7.bundle_app === 'yes';
        var smar7Modal = document.querySelector('.sm7-popup');
        var needSkipClick = (this.integrations.needSkipClick || isSmar7)
            && !lqd.integrate_with_recharge
            && (event.isTrusted || isIPhone);

        if ((!event.isTrusted || isIPhone) && !smar7Modal) return this.check(event, target);
        if (needSkipClick && this.integrations.list.bold.productUpsell) {
            if (target.name === 'checkout') return this.check(event, target);
        }
        if (!needSkipClick && !isSmar7) return this.check(event, target);
        if (isSmar7 && (!event.isTrusted || isIPhone)) return;

        if (smar7Modal) return this.integrations.smar7();
        else return this.check(event, target);
    },

    validate: function(form) {
        var elems = form.querySelectorAll('[type="text"], [type="checkbox"], select, textarea');

        var requiredElems = Array.prototype.filter.call(elems, function(el) {
            return el && el.required;
        });

        if (!requiredElems.length) return true;

        return !requiredElems.some(function(el) {
            return !el.checkValidity();
        });
    },

    allowUpsells: function(el) {
        if (window.mixed_cart) return; //integration with Recurring Orders & Subscriptions by Bold
        if (window.popup_upsell && !document.querySelector('#upsellclosebtn')) return; // integration with Product Upsell
        if (window.ol_checkout_ok instanceof Function && !ol_checkout_ok()) return; // integration with OrderLogic
        if (el.dataset.zpaSubmitButton === '') return; // integration with ZipifyPages CRM popup

        return true;
    },

    fallbackRedirect: function() {
        var fallback = utils.store.get('fallback');
        fallback.id = setTimeout(function() { this.checkout({ redirect:true }) }.bind(this), fallback.timeout);
        utils.store.set('fallback', fallback);
    },

    handleMonkeyPatching: function() {
        const send = utils.store.get('XHR').send;

        if (XMLHttpRequest.prototype.send !== send) {
            XMLHttpRequest.prototype.send = send;
        }
    },

    handleClick: function(e) {
        if (lqd.template_name === 'page' && !e.isTrusted) return;

        if (e.target.name === 'update' || e.target.closest('[name="update"]')) return;

        if (!lqd.amazon_pay && e.target.closest('form[action^="https://payments.amazon"]')) return;

        if (this.helpers.zpPreventRedirect(e.target)) return;

        if (this.helpers.isBuyNow(e)) return new BuyNow(e);

        if (this.helpers.checkDirectCheckoutButtons(e.target)) {
            e.target.dataset.ocuCheckout = true;
            utils.store.set('redirect_url', '/checkout');
        }

        if (e.target.dataset.ocuCheckoutLink || e.target.closest('[data-ocu-checkout-link]')) {
            e.preventDefault();
            var href = (e.target.dataset.ocuCheckoutLink ? e.target : e.target.closest('[data-ocu-checkout-link]')).href;
            if (utils.store.get('isPermalinkHandling')) return;
            utils.store.set('isPermalinkHandling', true);
            var result = this.integrations.handlePermalink(href, 'redirect');
            return result.promise.then(result.callback);
        }

        if ((e.target.dataset.skipCart === 'true' || e.target.closest('[data-skip-cart]')) && utils.store.get('submitted')) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            return;
        }

        var target = this.helpers.checkSelector(e.target);

        if (target) this.init(e, target);
    },

    handleMousedown: function(e) {
        var self = this;

        if (e.target.dataset.skipCart !== 'true' && !e.target.closest('[data-skip-cart]')) return;

        if (e.target.name === 'update' || e.target.closest('[name="update"]')) return; // 283fa429

        if (this.helpers.zpPreventRedirect(e.target)) return;

        var amazonForm = e.target.closest('form[action^="https://payments.amazon"]');
        if (amazonForm && lqd.amazon_pay) {
            e.preventDefault();
            e.stopPropagation();

            var path = {
                ocu: lqd.proxy_url + '/amazon/forward',
                shopify: amazonForm.querySelector('[name="redirectURL"]').value
            };

            var handle = function() {
                self.checkout()
                    .then(function(res) { location = path[res.status ? 'ocu' : 'shopify'] })
                    .catch(function(res) { location = path.shopify })
            };

            var onError = function(form) {
                form.submit();
            };

            if (!e.target.closest('form[action="/cart/add"]')) return handle();

            var cart = document.querySelector('form[action="/cart/add"]');
            var button = amazonForm.querySelector('[type="submit"]');
            return self.cart.add(cart, button, path).then(handle).catch(onError.bind(null, amazonForm));
        }

        var form = e.target.closest('form[action="/cart/add"]') || document.querySelector('form[action="/cart/add"]');
        var button = e.target.dataset.skipCart === 'true' ? e.target : e.target.closest('[data-skip-cart]');

        if (!form) return;

        e.preventDefault();
        e.stopPropagation();
        utils.store.set('submitted', true);

        var handle = function() { self.checkout({ redirect:true }) };
        var onError = function(form) { form.submit(); };
        return self.cart.add(form, button).then(handle).catch(onError.bind(null, form));
    },

    listenEvents: function() {
        document.addEventListener('mousedown', this.integrations.amazonPay.bind(this), true);
        document.addEventListener('touchstart', this.handleClick.bind(this), true);
        document.addEventListener('click', this.handleClick.bind(this), true);
        window.addEventListener('pagehide', this.helpers.disableButtons);
        window.addEventListener('locationchange', function() {
            document.removeEventListener('click', this.handleClick.bind(this), true);
            document.addEventListener('click', this.handleClick.bind(this), true);
        }.bind(this));

        window.addEventListener('pageshow', function(e) {
            if (e.persisted) location.reload();
            this.helpers.disableButtons();
        }.bind(this));

        // if (lqd.template_name !== 'cart') return;
        // document.addEventListener('mousedown', this.cart.update.bind(this), true);
        // document.addEventListener('change', this.cart.state.bind(this));
    }
};

function amazonPay(e) {
    const self = this;
    const amazonForm = e.target.closest('form[action^="https://payments.amazon"]');

    if (!amazonForm || !lqd.amazon_pay) return;

    e.preventDefault();
    e.stopPropagation();

    utils.store.set('amazonPayInitiated', true);

    const addForm = e.target.closest('form[action="/cart/add"]');
    const path = lqd.proxy_url + '/amazon/forward';

    const getToken = function(url) {
        const escaped = lqd.proxy_url.replace(/\//g, '\\/');
        const reg = new RegExp(escaped + '\\/((?:\\w+[-_]?)+)\\/?');
        const match = reg.exec(url);

        return match && match[1];
    };

    const fallback = function() {
        amazonForm.submit();
    };

    const onSuccess = function(res) {
        if (!res.status) return fallback();

        const token = getToken(res.checkout_url);
        if (!token) return fallback();

        utils.cookie.set('ocu_checkout_token', token);
        location.assign(path);
    };

    if (!addForm) {
        return self.checkout().then(onSuccess).catch(fallback);
    }

    const cart = document.querySelector('form[action="/cart/add"]');
    const button = amazonForm.querySelector('[type="submit"]');

    self.cart.add(cart, button)
        .then(self.checkout)
        .then(onSuccess)
        .catch(fallback);
}

function Bold() {
    this.isBoldRecuring = function() {
        var boldRecurringEl = document.querySelector('[data-bold-recurring]');
        var isBoldRecuring = boldRecurringEl && boldRecurringEl.checked;
        return isBoldRecuring;
    };

    this.upsellPopup = function(target) {
        var modalButtons = [
            target.querySelector('[data-bold-component-id="upsell_continue"]'),
            target.querySelector('[data-bold-component-id="upsell_no_thanks"]'),
            target.querySelector('#bold-modal__btn-close')
        ];

        modalButtons.forEach(function(item) {
            if (!item) return;
            item.addEventListener('click', function(e) {
                setTimeout(function() {
                    self.checkout({ redirect: true });
                }, 500);
            });
        });
    };

    this.initRecurring = function() {
        var clones = document.querySelectorAll('[data-ocu-clone]');
        var clone = Array.prototype.filter.call(clones, function(i) { return i && !i.dataset.ocuCheckout; })[0];
        if (clone) clone.click();
    };

    this.recurring = function(form, token) {
        var cfg = {
            protocol: 'https://',
            host: 'recurringcheckout.com',
            proxy: '/s/',
            permanent: /(\w+)\.myshopify\.com/.exec(BOLD.common.Shopify.shop.permanent_domain)[1],
            path: '/checkout/recurring/',
            query: '?shop_url=' + location.host
        };

        form.action = cfg.protocol + cfg.host + cfg.proxy + cfg.permanent + cfg.path + token + cfg.query;
        form.submit();
    };
}

function BuyNowBtns() {
    if (!lqd.themeSkipCart) return;

    const self = this;

    const buyNowBtn = document.querySelector('button[id="AddToCart"]');
    if (!buyNowBtn) return;

    const innerTextEl = buyNowBtn.querySelector('#AddToCartText');
    if (!/buy\s*(it)?\s*now/i.test(innerTextEl && innerTextEl.innerText)) return;

    const cb = function() { self.checkout({ redirect: true }); };
    const onError = function(form) { form.submit() };

    buyNowBtn.addEventListener('click', function(e) {
        e.preventDefault();
        const form = buyNowBtn.closest('form[action="/cart/add"]');
        self.cart.add(form, e.target).then(cb).catch(onError.bind(null, form));
    });
}

function HandlePermalink(url, redirect) {
    var self = this;
    var reg = utils.store.get('permalink');
    var match = reg.exec(url);
    var cfg = { redirect: redirect };

    if (!match) return {
        promise: new Promise(function(resolve) { resolve({ checkout_url: url }); }),
        callback: function(res) {
            return redirect ? location.assign(url) : new Promise(function(resolve) { resolve(res); })
        }
    };

    var discount = match[2];
    if (discount) cfg.params = [{ discount: discount }];

    var groups = match[1].split(',');

    var data = groups.reduce(function(acc, item, i, arr) {
        var id = +item.split(':')[0];
        var qty = +item.split(':')[1];

        var cartItem = lqd.cart_variants_json.filter(function(item) { return item.id === id })[0];
        if (cartItem) qty += cartItem.quantity;

        if (acc) acc += '&';
        return acc += 'updates[' + id + ']=' + qty;
    }, '');

    return {
        promise: self.cart.bulkAdd(data),
        callback: function() { return self.checkout(cfg); }
    };
}

function CartDrawer(target) {
    var form = target.querySelector('form[action="/cart"]');
    var btn = form && form.querySelector('input[type="submit"]');
    if (!btn) return;

    btn.type = 'button';
    btn.addEventListener('click', function(e) {
        self.checkout({ redirect: true });
    });
}

function CartPopup() {
    var btn = document.querySelector('.bkt--upsell-target-checkout');
    if (!btn) return;

    var cfg = {
        tag: 'input ',
        type: 'type="button" ',
        style: 'style="position:absolute;left:0;top:0;width:100%;height:100%;cursor:pointer;opacity:0" ',
        data: 'data-ocu-dialog-btn '
    };

    btn.style.position = 'relative';
    btn.insertAdjacentHTML('beforeend','<'+cfg.tag+cfg.type+cfg.style+cfg.data+'>');

    var clone = document.querySelector('[data-ocu-dialog-btn]');
    clone.addEventListener('click', function(e) {
        e.stopPropagation();
        btn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="bkt--nc-icon" x="0px" y="0px" width="64px" height="15px" viewBox="0 0 64 64"><g><circle class="nc-dots-7-2" data-color="color-2" fill="#445FFF" cx="32" cy="32" r="26" transform="translate(6.26687999999989 6.26687999999989) scale(0.8041600000000034)" style="opacity:0.8041600000000034"></circle><circle class="nc-dots-7-1" fill="#445FFF" cx="-72" cy="32" r="26" transform="translate(3.2332800000000272 12.933120000000109) scale(0.5958399999999966)" style="opacity:0.5958399999999966"></circle><circle class="nc-dots-7-3" fill="#445FFF" cx="132" cy="32" r="26" transform="translate(33.6 19.2) scale(0.4)" style="opacity:0.4"></circle></g></svg>';
        function setAttributes(e,t){for (var i in t)e.setAttribute(i,t[i]);} function dotsSevenStep(e){startDots7||(startDots7=e);var t=e-startDots7,n=Math.min(t/250,4);n=4==n?0:n,decimalRot=n%1,upperInteger=Math.ceil(n),1e3>t||(startDots7+=1e3);if (circleDots7[0][0]){window.requestAnimationFrame(dotsSevenStep);var a=[],r=[],o=[],s=[-72,32,132],c=[32,32,32];for (j = 0;  circleDots7Number > j ; j++) {for (a[0]=a[1]=a[2]=.4,1==upperInteger?(a[0]=1-3*decimalRot/5,a[1]=.4+3*decimalRot/5):2==upperInteger?(a[1]=1-3*decimalRot/5,a[2]=.4+3*decimalRot/5):3==upperInteger?(a[1]=.4+3*decimalRot/5,a[2]=1-3*decimalRot/5):4==upperInteger?(a[0]=.4+3*decimalRot/5,a[1]=1-3*decimalRot/5):a[0]=1,i=0;3>i;i++)r[i]=(1-a[i])*s[i],o[i]=(1-a[i])*c[i],setAttributes(circleDots7[i][j],{
transform: 'translate('+r[i]+' '+o[i]+') scale('+a[i]+')',
style: 'opacity:'+a[i]+';'
});}}}!function(){var e=0;window.requestAnimationFrame||(window.requestAnimationFrame=function(t){var i=(new Date).getTime(),n=Math.max(0,16-(i-e)),a=window.setTimeout(function(){t(i+n);},n);return e=i+n,a;});}();var circleDots7=[],startDots7=null;circleDots7[0]=document.getElementsByClassName('nc-dots-7-1'),circleDots7[1]=document.getElementsByClassName('nc-dots-7-2'),circleDots7[2]=document.getElementsByClassName('nc-dots-7-3'),circleDots7Number = circleDots7[0].length,window.requestAnimationFrame(dotsSevenStep);
        self.checkout({ redirect: true });
    });
}

function CheckoutLinks() {
    var checkoutLinks = document.querySelectorAll('a[href="/checkout"]');

    Array.prototype.forEach.call(checkoutLinks, function(link) {
        if (!link) return;

        link.addEventListener('click', function(e) {
            e.stopPropagation();
            e.preventDefault();
            self.checkout({ redirect: true });
        });
    });
}

function Discounts() {
    var discount = document.querySelector('input[name="discount"]');
    var discountCC = utils.cookie.get('discount_code'); // integration with CouponCountdown
    var discountShare = utils.cookie.get('ocu-share-discount');
    var isPopupShown = utils.cookie.get('popupcookie');

    if (window._chpmgr && !isPopupShown) return; // integration with chilliapps exit popup
    if (!discount && !discountCC && !discountShare) return;

    var code;
    if (discount) code = discount.value;
    if (discountCC) {
        code = discountCC;
        utils.cookie.remove('discount_code');
    }

    if (discountShare) {
        code = discountShare;
        utils.cookie.remove('ocu-share-discount');
    }

    var param = {
        name: 'discount',
        value: encodeURIComponent(code)
    };

    var params = utils.store.get('params');

    if (discountShare && lqd.template_name === 'page' || !param.value) return; // zp & shareable discount

    params.arr.push(param);
    utils.store.set('params', params);
}

function Recharge() {
    var self = this;

    this.getCheckoutUrl = function(cart) {
        const gaLinker = function() {
            try {
                return '&' + ga.getAll()[0].get('linkerParam');
            } catch (e) {
                return '';
            }
        };

        const customerParams = function() {
            return lqd.customer.id ? '&customer_id=' + lqd.customer.id + '&customer_email=' + lqd.customer.email : '';
        };
        const token = cart.token || utils.cookie.get('cart');
        const url = 'https://checkout.rechargeapps.com/r/checkout?myshopify_domain='
            + lqd.permanent_domain
            + '&cart_token='
            + token
            + gaLinker()
            + customerParams();

        return url;
    };

    this.isSubscription = function(res) {
        var cart = res.cart || res.data.cart || res.data;

        return cart.items.some(function(item) {
            return item.properties && (item.properties.subscription_id || item.properties.shipping_interval_frequency);
        });
    };

    this.processCart = function() {
        window.reChargeProcessCart = function() {
            self.checkout({ redirect: true });
        };
    };

    this.init = function(res, target) {
        var cart = res.cart || res.data.cart || res.data;
        var form = target && target.closest('form');

        var url = (form && form.action === '/cart/add')
            ? '/cart'
            : self.getCheckoutUrl(cart);

        return url;
    }
}

function smar7() {
    var self = this;

    var isSmar7Installed = ~document.head.innerHTML.indexOf('bundle-upsell');
    if (!isSmar7Installed) return;

    var ctaBtns = document.querySelectorAll("[name='checkout'], [href^='/checkout'], form[action='/checkout'] [type='submit'], #checkout, [name='goto_pp'], .checkout_button");
    Array.prototype.forEach.call(ctaBtns, function(btn) {
        btn.disabled = true;
    });

    var i = 0;
    var int = setInterval(function() {
        if ((++i && i > 7) || (window.SMAR7 && SMAR7.bundle)) {
            Array.prototype.forEach.call(ctaBtns, function(btn) {
                btn.disabled = false;
            });
            clearInterval(int);
        }
    }, 3000);

    var redirect = function(discount) {
        var button, path, params = utils.store.get('params');

        if (discount) {
            SMAR7.util.setCookie('smar7coupon', discount, 3600);

            params.arr.push({
                name: 'discount',
                value: encodeURIComponent(discount)
            });
        } else {
            discount = SMAR7.bundle.helper.determineCoupon && SMAR7.bundle.helper.determineCoupon();
        }

        if (SMAR7.paypal) {
            path = '/checkout?goto_pp=paypal_express&discount=' + encodeURIComponent(discount);
            button = document.querySelector('[name="goto_pp"]');
        } else {
            path = '/checkout?discount=' + encodeURIComponent(discount);
            button = document.querySelector(
                '[name="checkout"], [href="/checkout"], form[action="/checkout"] input[type="submit"], #checkout'
            );
        }

        utils.store.set('params', params);
        self.checkout({ redirect: true });
    };

    var handle = function() {
        if (window.SMAR7 && SMAR7.bundle) SMAR7.bundle.redirect = redirect;
    };

    document.addEventListener('click', handle, true);
};

function Integrations() {
    var self = this;
    var bold = new Bold();
    var recharge = new Recharge();

    this.list = {
        bold: {
            get isInstalled() { return window.BOLD && BOLD.apps_installed; },
            get productOptions() { return this.isInstalled && BOLD.apps_installed['Product Options']; },
            get productUpsell() { return this.isInstalled && BOLD.apps_installed['Product Upsell']; },
        },
        recharge: {
            isSubscriptionProduct: function(cart) {
                return cart.items.some(function(item) {
                    return item.properties && (item.properties.subscription_id || item.properties.shipping_interval_frequency);
                });
            }
        }
    };


    // for future integartion
    this.boldUpsellCheckoutOffer = function() {
        if (!window.BOLD || !window.Shopify) return;

        var data  = {
            data: {
                cart: {
                  items: lqd.cart.items,
                  total_price: lqd.cart.total_price
                }
            }
        };

        return ajax.request({
            method: 'post',
            url: window.BOLD.upsell.path + window.Shopify.shop + '/validate_checkout_offer',
            data: JSON.stringify(data)
        });
    };

    this.needSkipClick = this.list.bold.productOptions || this.list.bold.productUpsell;

    this.start = function() {
        if (!lqd.upsell_cart_include_upsells) return;
        if (lqd.template_name !== 'cart') this.main();
        // try {
        //     this[(lqd.template_name === 'cart' ? 'cart' : 'main')]();
        // } catch (e) { console.warn(e); }
    };

    this.main = function() {
        var handleMutation = function(mutation) {
            if (
                mutation.type !== 'attributes'
                || mutation.target !== document.querySelector(self.ocuSelectors)
                || !/cart-?(popup|container|drawer)/i.test(mutation.target.id)
                || !/bold-upsell-modal-window/i.test(mutation.target.id)
            ) return;

            if (mutation.target.id === 'bold-upsell-modal-window') {
                return self.boldUpsellPopup(mutation.target);
            }

            var checkoutButtons = document.querySelectorAll(self.ocuSelectors);
            // var dataOcuCheckoutValue = checkoutButtons[0].dataset.ocuCheckout === 'true';
            var dataDisableRechargeValue = checkoutButtons[0].dataset.disableRecharge === 'true';
            var forEach = Array.prototype.forEach;

            forEach.call(checkoutButtons, function(item) {
                if (item.innerHTML === 'Checkout') item.removeAttribute('onclick'); // Integration with AceCase store
            });

            // if (!dataOcuCheckoutValue) { // Integration with MyDietChief store
            //     Array.prototype.forEach.call(checkoutButtons, function(item) {s
            //         item.dataset.ocuCheckout = true;
            //     });
            // }

            if (lqd.disabled_by_subscription_app && dataDisableRechargeValue) return;

            forEach.call(checkoutButtons, function(item) {
                item.disableRecharge = true;
            });

            self.cartPopup();
            self.cartDrawer(mutation.target);
            self.checkoutLinks();
            self.listenEvents();
        };

        var handleMutations = function(mutations) { mutations.forEach(handleMutation); };

        var config = {
            childList: true,
            subtree: true,
            attributes: true
        };

        new MutationObserver(handleMutations).observe(document, config);

        self.buyNowBtns();
        self.recharge.processCart();
        self.revy();
    };

    // this.cart = function() {
    //     // var handleMutation = function(mutation) {
    //     //     var target = document.querySelector(self.ocuSelectors);
    //     //     if (mutation.type === 'attributes' && mutation.target === target) {
    //     //         self.smar7();
    //     //     }
    //     // };

    //     // var handleMutations = function(mutations) { mutations.forEach(handleMutation); };

    //     // var config = {
    //     //     subtree: true,
    //     //     attributes: true
    //     // };

    //     // new MutationObserver(handleMutations).observe(document, config);

    //     self.revy();
    // };

    this.revy = function() {
        if (window.RevyApp && RevyApp.events) RevyApp.events.updatedCart = [];
    };

    this.discounts = Discounts;
    this.smar7 = smar7;
    this.isBoldRecuring = bold.isBoldRecuring;
    this.boldRecurring = bold.initRecurring;
    this.bold = bold.recurring;
    this.boldUpsellPopup = bold.upsellPopup;
    this.cartPopup = CartPopup;
    this.cartDrawer = CartDrawer;
    this.checkoutLinks = CheckoutLinks;
    this.handlePermalink = window.oneClickUpsellHandlePermalink = HandlePermalink.bind(this);
    this.buyNowBtns = BuyNowBtns;
    this.recharge = recharge;
    this.amazonPay = amazonPay;
    // this.amazonPay = function() { AmazonPay(self) };

    this.start();
}

function HistoryApi() {
    history.pushState = (function(f) {
        return function() {
            var result = f.apply(this, arguments);
            window.dispatchEvent(new Event('pushState'));
            window.dispatchEvent(new Event('locationchange'));
            return result;
        };
    })(history.pushState);

    history.replaceState = (function(f) {
        return function() {
            var result = f.apply(this, arguments);
            window.dispatchEvent(new Event('replaceState'));
            window.dispatchEvent(new Event('locationchange'));
            return result;
        };
    })(history.replaceState);

    window.addEventListener('popstate', function() {
        window.dispatchEvent(new Event('locationchange'));
    });
}

function Verify() {
    var self = this;
    var target;

    this.init = function(target) {
        target = target;

        if (window.catchXHR) {
            catchXHR = false;
            XMLHttpRequest.callbacks = [];
        }
        if (window.beeketingWPJP) beeketingWPJP = {};

        self.checkout()
            .then(self.handle)
            .catch(self.helpers.redirect);
    };

    this.data = function() {
        var options = {
            method: 'get',
            url: self.helpers.getProxyUrl() + utils.store.get('lqdCart')
        };

        return ajax.request(options);
    };

    this.upsells = function(res) {
        if (self.integrations.recharge.isSubscription(res)) {
            var url = self.integrations.recharge.init(res, target);
            utils.store.set('redirect_url', url);
            res.data.redirect_url = url;

            if (!lqd.integrate_with_recharge) {
                return new Promise(function(resolve) { resolve(res); });
            }
        }

        res = self.cart.modify(res);

        const cart = res.data;
        return self._addToken(cart)
            .then(function(c) {
                return self._makeCheckUpsells(c, res);
            });
    };

    this.handle = function(res) {
        // var isAppSkipCart = lqd.skip_cart && /index|collection|product/.test(lqd.template_name);
        // var isThemeSkipCart = lqd.themeSkipCart;
        // if (cart.redirect_url) return location = cart.redirect_url;
        if (!res.status && !lqd.themeSkipCart) return self.helpers.redirect(res);
        // if (!res.status && !lqd.themeSkipCart) return location.assign('/cart');

        location = res.status || lqd.themeSkipCart
            ? res.checkout_url
            : '/cart';
    };

    this._makeCheckUpsells = function(cart, res) {
        cart.items = self.helpers.filterCartItemFields(cart.items);

        const data = {
            shop_domain: lqd.current_domain,
            cart: cart,
            require_paypal: utils.store.get('requirePayPal'),
            customer: { id: res.data.customer_id },
            incarts: utils.store.get('incarts')
            // incarts: { 47: { status: 'declined', shopify_variant_id: 16052480475207, quantity: 1, shown_at: Date.now() }}
            // incarts: { 47: { status: 'offered', shopify_variant_id: 16052480475207, quantity: 1, shown_at: Date.now() }}
        };

        const options = {
            method: 'post',
            url: self.helpers.getProxyUrl() + utils.store.get('checkUpsells'),
            data: utils.serialize(data, { indices: true })
        };

        return ajax.request(options);
    };


    this._addToken = function(cart) {
        const store_token = utils.store.get('cart_token');
        return new Promise(function(resolve, reject) {
            if (!cart.token && store_token) {
                cart.token = store_token;
                resolve(cart);
            } else if (!cart.token) {
                self.cart.get().then(function(res) {
                    cart.token = res.data.token;
                    resolve(cart);
                });
            } else {
                resolve(cart);
            }
        });
    }
};

const appendChain = window.Symbol ? Symbol('appendChain') : 'oneClickUpsellAppendChain';
Object[appendChain]=function(t,o){for(var n=o,e=o2nd=oLast=t instanceof this?t:new t.constructor(t),r=this.getPrototypeOf(o2nd);r!==Object.prototype&&r!==Function.prototype;r=this.getPrototypeOf(o2nd))o2nd=r;return o.constructor===String&&(n=Function.prototype,e=Function.apply(null,Array.prototype.slice.call(arguments,1)),this.setPrototypeOf(e,oLast)),this.setPrototypeOf(o2nd,n),e};

function Updater(res) {
    this.res = res;
    this.cart = res && res.data.cart;
    this.isCartUpdated = utils.store.get('cartUpdated');
    this.isOfferDeclined = utils.store.get('offerDeclined');
    this.options = {
        add:    { method: 'post', url: '/cart/add.js' },
        change: { method: 'post', url: '/cart/change.js' },
        update: { method: 'post', url: '/cart/update.js' }
    };
    this.regs = {
        attributes: /\[(.+?)\]/,
        key: /(?:updates_(?:.*?))?(\d+:\w+)/,
        id: /(?:updates_(?:.*?))?(\d+):?/
    };
    this.selectors = {
        form: 'form[action^="/checkout"], form[action^="/cart"]',
        attributes: '[name^="attributes["]',
        currency: '[name="currency"]',
        updates: '[name^="updates["]',
        note: '[name="note"]'
    };
    this.data = {
        currency: lqd.shop_currency,
        attributes: {},
        lineItems: [],
        updates: {},
        changes: [],
        sameIds: [],
        note: ''
    };
    this.payload = {
        updates: {},
        currency: '',
        note: null,
        attributes: {}
    };
}
Updater.prototype = {
    init: function() {
        const skipUpdate = (this.isCartUpdated && !this.isOfferDeclined) && (!this.isNoteChanged && !this.hasAttributes);
        if (skipUpdate) return this.resolve(this.res);
        if (!this.form) return this.updateCurrency();

        this.buildPayload();
        if (this.res) return this.updateCart();
    }
};
const UpdaterRequests = {
    updateCart: function(data, isUpgrade) {
        const options = this._getOptions('update', data, isUpgrade);
        const params = isUpgrade && data.changeData;
        const updateCart = function() { return ajax.request(options); };

        return this._updateSameId(params).then(updateCart);
    },
    addToCart: function(data) {
        const options = this._getOptions('add', data);

        return ajax.request(options);
    },
    changeCart: function(data, chain) {
        const options = this._getOptions('change', data);
        const request = !chain || chain instanceof Object
            ? ajax.request(options)
            : function() { return ajax.request(options); };

        return request;
    },
    updateCurrency: function() {
        if (!this.needCurrencyUpdate) return this.resolve(this.res);

        this.getCurrency();
        const options = this._getOptions('update', { currency: this.data.currency });

        return ajax.request(options).catch(this.resolve.bind(this, this.res));
    },
    _updateSameId: function(changeData) {
        if (!this.data.sameIds.length) return this.resolve(false);

        const allRequests = this._getCartChangeRequests(changeData);
        const requestChain = this._requestChain(allRequests);

        return new Promise(requestChain.bind(this));
    },
    _getCartChangeRequests: function(changeData) {
        const cb = function(acc, change) {
            if (!change.id && !change.line) return acc;
            if (changeData) {
                const id = changeData.id;
                const line = changeData.__line || changeData.line;
                const isUpgradeItem = change.line === line || (id && change.id === id);
                if (isUpgradeItem) return acc;
            }

            delete change.__variantId;
            acc.push(this.changeCart(change, 'chain'));

            return acc;
        };

        return this.data.changes.reduce(cb.bind(this), []);
    },
    _requestChain: function(allRequests) {
        return function(resolve, reject) {
            if (!allRequests.length) return resolve(false);
            !function createRequest() {
                const req = allRequests.pop();
                const cb = function(res) {
                    if (allRequests.length) return createRequest();
                    resolve(res);
                };

                return req().then(cb).catch(reject);
            }();
        }
    },
    _getOptions: function(type, data, isUpgrade) {
        const options = Object.assign({}, this.options[type]);
        options.data = isUpgrade ? data.updateData : (data || this.payload);
        return options;
    }
};
const UpdaterPayload = {
    buildPayload: function() {
        this.getUpdates();
        this.getAttributes();
        this.getCurrency();
        this.getNote();

        Object.keys(this.payload).forEach(function(key) {
            this.payload[key] = this.data[key];
        }.bind(this));

        return this.payload;
    },
    getUpdates: function() {
        this.updateElements.forEach(function(item) {
            const isNoId = !item || (!item.dataset.id && !item.id);
            if (isNoId) return;

            const quantity = +item.value;
            const line = this._getLine(item);
            const key = this._getKey(item);
            const id = this._getId(item);
            const isIdMissing = id.toString().length < 3;

            this._saveLineItem(id, key, line, quantity);
            if (this.data.updates[id] || isIdMissing) this._saveSameId(id);
            this._saveChanges();
            if (~this.data.sameIds.indexOf(id) || isIdMissing) return;
            this._saveUpdates(id, quantity);
        }.bind(this));

        return this.data.updates;
    },
    getAttributes: function() {
        if (!this.attributesElements.length) return {};

        const cb = function(acc, item) {
            const attribute = this._getAttribute(item);
            if (!attribute.key) return acc;

            acc[attribute.key] = attribute.value;
            return acc;
        };

        this.data.attributes = this.attributesElements.reduce(cb.bind(this), {});
        return this.data.attributes;
    },
    getCurrency: function() {
        if (!this.currencyElement) return this.data.currency;
        this.data.currency = this.currencyElement.value;
        return this.data.currency;
    },
    getNote: function() {
        if (!this.noteElement) return '';
        this.data.note = this.noteElement.value;
        return this.data.note;
    }
};
const UpdaterPrecheckout = {
    acceptAddOffer: function(data) {
        return this.updateCart().then(this.addToCart.bind(this, data));
    },
    acceptUpgradeOffer: function(addData, cartItem, cartItemLine) {
        const data = this._getUpgradeOfferData(cartItem, cartItemLine);
        const changeData = Object.assign({}, data.changeData);
        delete changeData.__line;

        return this.updateCart(data, 'upgrade')
            .then(this.changeCart.bind(this, changeData))
            .then(this.addToCart.bind(this, addData));
    },
    _getUpgradeOfferData: function(cartItem, cartItemLine) {
        const udpateData = Object.assign({}, this.payload);
        const lineItemByKey = this.data.lineItems.find(function(item) {
            return item.id === cartItem.key;
        });
        const lineItemById = this.data.lineItems.find(function(item) {
            return item.__variantId === cartItem.id;
        });
        const lineItem = lineItemByKey || lineItemById;
        const quantity = lineItem.quantity ? lineItem.quantity - 1 : 0;
        const changeData = {
            // __line: cartItemLine,
            // id: cartItem.key,
            line: cartItemLine,
            quantity: quantity
        };

        delete udpateData.updates[cartItem.id];

        return {
            updateData: udpateData,
            changeData: changeData
        };
    }
};
const UpdaterElements = {
    get forms() {
        const forms = document.querySelectorAll(this.selectors.form);
        const visibleForms = this.arrayFrom(forms).filter(function(form) {
            return form.offsetHeight;
        });

        return visibleForms;
    },
    get form() {
        const isNotePresent = this.forms.some(function(e) {
            return e.note && e.note.value;
        });
        const filteredForm = this.forms.find(function(form) {
            return form.querySelector(this.selectors.updates) && (isNotePresent ? form.note && form.note.value : true);
        }.bind(this));

        return filteredForm;
    },
    get updateElements() {
        const arr = this.arrayFrom(this.form.querySelectorAll(this.selectors.updates));

        return arr.filter(function(item) {
            return item && !item.disabled;
        });
    },
    get attributesElements() {
        const nodeList = this.form.querySelectorAll(this.selectors.attributes);
        return this.arrayFrom(nodeList);
    },
    get noteElement() {
        return this.form.querySelector(this.selectors.note);
    },
    get currencyElement() {
        return document.querySelector(this.selectors.currency);
    }
};
const UpdaterHelpers = {
    resolve: function(res) {
        return new Promise(function(resolve) { resolve(res); });
    },
    arrayFrom: function(nodeList) {
        if (!(nodeList instanceof NodeList)) nodeList = [nodeList];
        return Array.prototype.slice.call(nodeList);
    },
    _getLine: function(item) {
        return +(item.dataset.quantityItem || item.dataset.lineId);
    },
    _getKey: function(item) {
        const match = this.regs.key.exec(item.dataset.id || item.id);
        return match && match[1];
    },
    _getId: function(item) {
        const match = this.regs.id.exec(item.dataset.id || item.id);
        return match && +match[1];
    },
    _saveSameId: function(id) {
        delete this.data.updates[id];
        this.data.sameIds.push(id);
    },
    _saveLineItem: function(id, key, line, quantity) {
        const lineItem = {
            __variantId: id,
            quantity: quantity,
        };

        if (line) lineItem.line = line;
        else if (key) lineItem.id = key;

        this.data.lineItems.push(lineItem);
    },
    _saveChanges: function() {
        this.data.changes = this.data.lineItems.filter(function(item) {
            return ~this.data.sameIds.indexOf(item.__variantId);
        }.bind(this));
    },
    _saveUpdates: function(id, quantity) {
        this.data.updates[id] = quantity;
    },
    _getAttribute: function(item) {
        const match = this.regs.attributes.exec(item.name);
        if (!match) return {};
        return { key: match[1], value: item.value };
    },
    get needCurrencyUpdate() {
        return this.currencyElement && this.currencyElement.value !== this.data.currency;
    },
    get isNoteChanged() {
        return this.form && this.res && (this.res.data.cart.note !== this.getNote());
    },
    get hasAttributes() {
        return this.form && Object.keys(this.getAttributes()).length;
    }
};

[UpdaterRequests, UpdaterPayload, UpdaterPrecheckout, UpdaterElements, UpdaterHelpers]
.forEach(function(module) {
    Updater.prototype = Object[appendChain](Updater.prototype, module);
});

function Cart() {
    var self = this;

    this.add = function(form, button, data) {
        if (form) {
            var noId = function(serialized) { return !/id/.test(serialized); };

            data = self.serialize(form);

            if (noId(data)) {
                data = self.serialize(document.querySelector('#AddToCartForm'));
            }

            if (noId(data)) {
                var idOnBtn = document.querySelector('[data-cart-add]');
                if (idOnBtn) data = 'id=' + idOnBtn.dataset.cartAdd;
            }
        }

        var options = {
            method: 'post',
            url: '/cart/add.js',
            data: data
        };

        return ajax.request(options);
    };

    this.bulkAdd = function(data) {
        var options = {
            method: 'post',
            url: '/cart/update.js',
            data: data
        };

        return ajax.request(options)
    };

    this.get = function() {
        var options = {
            method: 'get',
            url: '/cart.js'
        };

        return ajax.request(options);
    };

    this.update = function(res) {
        return new Updater(res).init();
    };

    this.save = function(res) {
        // if (self.needCurrencyUpdate()) self.updateCurrency();
        self.disableMultiUpdate(res.data.cart.items);
        self.saveTags(res);

        // if (!lqd.is_precheckout && lqd.is_ajax_precheckout && !utils.cookie.get('ocu_countdown_start')) {
        //     return window.OCUPrecheckout({ utils: utils });
        // }

        lqd.cart_products_json = res.data.cart_products;
        lqd.cart_collections_json = res.data.cart_collections;
        lqd.subscription_products_json = res.data.subscription_products;
        lqd.subscription_variants_json = res.data.subscription_variants;

        return self.resolve(res);
    };

    this.modify = function(res) {
        const cart = res.cart || res.data.cart || res.data;

        // res.data = self.helpers.filterFields(cart);
        res.data = cart;
        res.data.subscription_products = lqd.subscription_products_json;
        res.data.cart_collections = lqd.cart_collections_json;
        res.data.cart_products = lqd.cart_products_json.filter(function(item) { return !item.error; });
        res.data.customer_id = lqd.customer_id;
        res = self.helpers.addBuyXGetYDiscount(res);
        if (cart.cart_level_discount_applications) res.data.automatic_discount = cart.cart_level_discount_applications[0];

        return res;
    };

    this.serialize = function(form) {
        return /trident|edge/i.test(navigator.userAgent)
            ? utils.serializeFormEdge(form)
            : utils.serializeForm(form);
    };

    this.attrubutes = function(attr) {
        const options = {
            method: 'post',
            url: '/cart/update.js',
            data: { attributes: attr }
        };

        ajax.request(options);
    };

    this.prepareUpdate = function(items) {
        var handle = function(acc, item) {
            var id = item.id.replace(/(\w+_)(\d+)(:\w+)/, '$2');
            acc[id] = item.value;

            return acc;
        };

        items = items.length ? items : [items];

        var updates = Array.prototype.reduce.call(items, handle, {});

        return {
            updates: updates,
            currency: lqd.shop_currency
         };
    };

    this.saveTags = function(res) {
        var tags = res.data.cart_products.reduce(function(acc, product) {
            return acc.concat(product.tags);
        }, []);

        utils.store.set('tags', tags);
    };

    this.disableMultiUpdate = function(lineItems) {
        const inputs = document.querySelectorAll('input[name="updates[]"]');
        const offer = utils.store.get('offer');
        const isAdd = offer === 'add';

        if (isAdd && lineItems.length === inputs.length + 1) return;
        if (!isAdd && lineItems.length === inputs.length) return;

        Array.prototype.forEach.call(inputs, function(input) {
            if (!input.offsetHeight) input.disabled = true;
        });
    };

    this.state = function(e) {
        if (e.target.name !== 'updates[]') return;
        utils.store.set('cartChanged', true);
    };

    this.resolve = function(res) {
        return new Promise(function(resolve) { resolve(res); });
    };

    this.needCurrencyUpdate = function() {
        return document.querySelector('[name="currency"]');
    };

    this.updateCurrency = function() {
        var options = {
            method: 'post',
            url: '/cart/update.js',
            data: { currency: lqd.shop_currency }
        };

        ajax.request(options).then(function() { utils.store.set('cartChanged', false); });
    };

    this.isNotePresent = function(forms) {
        return Array.prototype.some.call(forms, function(e) { return e.note && e.note.value });
    };

    this.filterFormsIfNotes = function(forms, isNotePresent) {
        var handle = function(form) {
            return form['updates[]'] && (isNotePresent ? form.note && form.note.value : true);
        };

        return Array.prototype.filter.call(forms, handle)[0];
    };

    this.error = function(e) {
        var desc = e.data.description;

        if (e.status !== 422) return alert(desc || 'Something went wrong. Please try again.');

        var allInCart = /all/i.test(desc);
        var soldOut = /sold out/i.test(desc);

        alert(desc);

        if (allInCart) return self.checkout({ redirect: true });
        if (soldOut) location.reload();
    };
};

var SyncQtyFields = {
    init: function() {
        if (!lqd.upsell_cart_include_upsells) return;
        if (!this.fields.length) return;
        this.listenEvents();
    },
    get fields() {
        return document.querySelectorAll('[data-quantity-item]');
    },
    getFiledsForUpdate: function(target) {
        var id = this.getId(target);
        var elems = document.querySelectorAll('[data-quantity-item="' + id + '"]');
        var arr = this.getArray(elems);

        return arr;
    },
    getId: function(target) {
        return target.dataset.quantityItem;
    },
    getArray: function(nodeList) {
        return Array.prototype.slice.call(nodeList);
    },
    update: function(target, value) {
        this.getFiledsForUpdate(target).forEach(function(field) {
            field.value = value;
        });
    },
    handle: function(e) {
        this.update(e.target, e.target.value);
    },
    listenEvents: function(e) {
        this.getArray(this.fields).forEach(function(field) {
            field.addEventListener('input', this.handle.bind(this));
        }.bind(this));
    }
}.init();

function SkipCart() {
    var self = this;

    if (lqd.themePopup && lqd.isThemePopupTag) return;
    // if (/product/.test(lqd.template_name) && !lqd.upsell_cart_include_upsells) return;

    this.init = function() {
        var isSkipCartPage = /index|collection|product/.test(lqd.template_name);
        lqd.skip_cart && isSkipCartPage && setTimeout(function() { self.removeEvents(); });
    };

    this.removeEvents = function() {
        let forms = document.querySelectorAll('form[action*="cart"], [data-zp-add-to-cart-form], #AddToCartForm1');
        forms = Array.prototype.filter.call(forms, function(form) { return form.dataset.zpLinkType !== 'zipify_page'; });
        var elems = [];

        var fakeForms = document.querySelectorAll('.product-form__cart');
        // TODO: move selectors to store
        if (fakeForms.length) {
            var getArr = function(nodeList) { return Array.prototype.slice.call(nodeList); };
            forms = getArr(forms).concat(getArr(fakeForms));
        }

        Array.prototype.forEach.call(forms, function(form) {
            var buttons = form.querySelectorAll('*[type="submit"], input[type="button"], button');

            Array.prototype.forEach.call(buttons, function(button) {
                elems.push({
                    button: button,
                    sibling: button.previousElementSibling,
                    parent: button.parentElement
                });
            });
        });

        elems.forEach(function(item) {
            if (item.button.dataset.qty) return;
            if (item.button.getAttribute('aria-controls')) return;
            if (/plus|minus|zpa-quantity/.test(item.button.className)) return;
            if (/error_txt|quantity|sold-out/i.test(item.button.id)) return;
            if (/amount|review/i.test(item.button.value)) return;

            item.button.removeAttribute('onclick');
            item.button.dataset.skipCart = true;
            item.button.type = 'button';

            // try {
            //     item.sibling
            //         ? item.sibling.insertAdjacentHTML('afterend', item.button.outerHTML)
            //         : item.parent.insertAdjacentHTML('afterbegin', item.button.outerHTML);
            // } catch (e) { console.warn(e); }

            // item.button.dataset.ocuClone = true;
            // item.button.classList.add('ocu-hidden');
        });

        self.listenEvents(forms);
    };

    this.onSuccess = function(res) {
        if (self.integrations.recharge.isSubscription(res)) return location = '/cart';

        var handle = function(item) { return item.properties && item.properties.frequency_num; };
        utils.store.set('cart_token', res.data.token);

        var isBoldSubscription = res.data.items.some(handle);

        if (!isBoldSubscription) return self.verify.init();

        try {
            self.integrations.bold(form, res.token);
        } catch (e) {
            console.warn(e);
            self.verify.init();
        }
    };

    this.onError = function(form) {
        form.submit();
    };

    this.listenEvents = function(forms) {
        Array.prototype.forEach.call(forms, function(form) {
            var buttons = form.querySelectorAll('[data-skip-cart]');

            Array.prototype.forEach.call(buttons, function(button) {
                button.addEventListener('click', function(e) {
                    if (self.integrations.isBoldRecuring()) {
                        return self.integrations.boldRecurring();
                    }

                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    e.preventDefault();
                    button.disabled = true;

                    if (!button.closest('form')) form = document.querySelector('form[action="/cart/add"]');

                    self.cart.add(form, button)
                        .then(self.cart.get)
                        .then(self.onSuccess)
                        .catch(self.onError.bind(null, form));
                });
            });
        });
    };

    this.init();
}

function BuyNow(e) {
    const self = this;

    if (lqd.themePopup && lqd.isThemePopupTag) return;
    if (!e.isTrusted) return;

    const form = e.target.closest('form[action="/cart/add"]') || document.querySelector('form[action="/cart/add"]');
    if (!form) return;

    e.stopImmediatePropagation();
    e.preventDefault();
    e.target.disabled = true;

    const cb = function() { self.checkout({ redirect: true }) };
    const onError = function(form) { form.submit() };

    self.cart.add(form, e.target).then(cb).catch(onError.bind(null, form));
}

function PublicMethod() {
    var self = this;
    var proto = self.__proto__.__proto__;

    this.init = function() {
        window.oneClickUpsellGetCheckoutUrl = proto.checkout = self.create;
    };

    this.create = function(config) {
        if (config === 'skip_cart') {
            return new Promise(function(resolve) { resolve(lqd.skip_cart); });
        }

        self.prepare(config);
        return self.check();
    };

    this.prepare = function(config) {
        const params = utils.store.get('params');
        self.config = config || {};
        self.config.incarts && utils.store.set('incarts', self.config.incarts);
        self.config.path && utils.store.set('amazonPath', self.config.path);
        self.config.button && self.helpers.payPal(self.config.button);
        self.config.params && self.params();
        self.integrations.discounts();
        self.helpers.params();
        self.handleDeclineOffer(config);

        params.str = params.str ? '?' + params.str : '';
        utils.store.set('params', params);
    };

    this.check = function() {
        return self.verify.data()
            .then(self.cart.save)
            .then(self.cart.update)
            .then(self.verify.upsells)
            .then(self.resolve)
            .catch(self.resolve);
    };

    this.resolve = function(res) {
        const isError = res instanceof Error;
        if (isError) console.log(res);

        res = (isError || !res) ? {} : (res.data || res.response);
        const data = self.build(res);
        utils.store.set('isPermalinkHandling', false);

        if (lqd.integrate_with_recharge && !/\d+/.test(res.status)) {
            return self.rechargeFallback(data);
        }

        return self.config.redirect
            ? self.redirect(data)
            : new Promise(function(resolve) { resolve(data); });
  };

    this.build = function(res) {
        const isEnabled = this._isEnabled(res);
        const params = utils.store.get('params');
        const amazonPath = utils.store.get('amazonPath') && utils.store.get('amazonPath')[isEnabled ? 'ocu' : 'shopify'];

        const result = {
            status: isEnabled,
            checkout_url: (isEnabled ? res.checkout_url : '/checkout') + params.str,
            skip_cart: lqd.skip_cart,
            redirect_url: amazonPath || res.redirect_url || utils.store.get('redirect_url')
        };

        params.str = '';
        utils.store.set('params', params);

        return result;
    };

    this.params = function() {
        var params = utils.store.get('params');

        self.config.params
            .map(function(param) {
                return Object.keys(param).map(function(key) {
                    return {
                        name: encodeURIComponent(key),
                        value: key === 'discount' ? param[key] : encodeURIComponent(param[key])
                    };
                })[0];
            })
            .forEach(function(param) {
                params.arr.push(param);
            });

        utils.store.set('params', params);
    };

    this.getUrl = function(res) {
        if (utils.store.get('amazonPath')) return res.redirect_url;

        if (lqd.integrate_with_recharge) return res.status ? res.checkout_url : res.redirect_url;

        return res.redirect_url || res.checkout_url;
    };

    this.redirect = function(res) {
        location = self.getUrl(res);
    };

    this.rechargeFallback = function(data) {
        return self.cart.get().then(function(cart) {
            if (self.integrations.recharge.isSubscription(cart)) {
                utils.store.set('redirect_url', self.integrations.recharge.getCheckoutUrl(cart.data));
            } else {
                utils.store.set('redirect_url', '/checkout');
            }

            data = self.build(data);

            return self.config.redirect
                ? self.redirect(data)
                : new Promise(function(resolve) { resolve(data); });
        });
    };

    this.handleDeclineOffer = function(config) {
        if (!config || config && !config.incarts) return;

        const isDeclined = Object.keys(config.incarts).some(function(key) {
            return config.incarts[key].status === 'declined';
        });

        utils.store.set('offerDeclined', isDeclined);
    };

    this._isEnabled = function(res) {
        return res.status ? res.status && !/\d+/.test(res.status) : false;
    };

    this.init();
}

function Helpers() {
    var self = this;

    this.disableButtons = function() {
        utils.store.set('checkoutButtonState', false);
    };

    this.params = function() {
        var params = utils.store.get('params');

        for (var i = 0; params.arr.length > i; i++) {
            var reg = new RegExp(params.arr[i].name);
            if (reg.test(params.str)) continue;

            params.str += params.arr[i].name + '=' + params.arr[i].value;
            if (i + 1 !== params.arr.length) params.str += '&';
        }

        utils.store.set('params', params);
    };

    this.redirect = function(res) {
        if (res.redirect_url) return location.assign(res.redirect_url);
        if (!lqd.subscription_products_size) return location.assign(res.checkout_url);

        const form = document.querySelector('form[action="/checkout"], form[action="/cart"]');
        if (!form) return self.checkout({ redirect: true });

        form.submit();
    };

    this.simulateSubmit = function() {
        var checkoutButtons = document.querySelectorAll(self.ocuSelectors);
        if (!checkoutButtons.length) return location = '/cart';

        var last = Array.prototype.slice.call(checkoutButtons, -1)[0];
        last.dispatchEvent(new MouseEvent('click'));
    };

    this.simulateDocumentClick = function() {
        var event = new Event('click');
        var target = document.createElement('button');

        target.type = 'submit';
        target.name = 'checkout';
        Object.defineProperty(event, 'target', { value: target });

        document.dispatchEvent(event);
    };

    this.preventMouseDown = function(e) {
        e.preventDefault();
        e.stopPropagation();
        // e.stopImmediatePropagation();
    };

    this.payPal = function(el) {
        if (el.name !== 'goto_pp' || el.value !== 'paypal_express') return;

        var params = utils.store.get('params');

        params.arr.push({
            name: el.name,
            value: el.value
        });

        utils.store.set('requirePayPal', true);
        utils.store.set('params', params);
    };

    this.filterFields = function(cart) {
        var needed_cart_fileds = utils.store.get('neededCartFileds');
        var needed_cart_items_fields = utils.store.get('neededCartItemsFields');

        cart = utils.filterObject(cart, needed_cart_fileds);

        cart.items = cart.items.map(function(item) {
            return utils.filterObject(item, needed_cart_items_fields);
        });

        return cart;
    };

    this.filterCartItemFields = function(items) {
        return items.map(function(item) {
            return Object.keys(item).reduce(function(acc, key) {
                if (key === 'product_description') return acc;
                acc[key] = item[key];
                return acc;
            }, {});
        });
    };

    this.getProxyUrl = function() {
        return lqd.proxy_url || utils.store.get('proxy');
    };

    this.checkSelector = function(target) {
        if (target.dataset.ocuCheckout === 'true') return target;

        const checkoutButtons = document.querySelectorAll(self.ocuSelectors);
        const isInclude = Array.prototype.some.call(checkoutButtons, function(item) {
            return item === target;
        });

        const isCartContentParent = target.closest('.cart_content') && target.closest('form[action="/checkout"] [type="submit"]');
        const isCartTemplate = lqd.template_name === 'cart' && target.closest('form[action="/cart"] [type="submit"]');
        const isCartAction = target.closest(self.ocuSelectors) || isCartContentParent || isCartTemplate;
        const notIncartUpsell = !target.closest('#nudge-offer'); // check if triggered Incart Upsell widget triggered

        const addToCartButton = (lqd.template_name === 'product' && !target.closest('form[action^="/cart/add"]'))
            && (((target.name === 'add' && target.type === 'submit') ? target : null)
            || (target.closest('[name="add"]')) && target.closest('[type="submit"]'));

        const parent = !isInclude
            && (isCartAction || target.closest('[name="checkout"]'))
            || addToCartButton;

        if ((isInclude || parent) && notIncartUpsell) return isInclude ? target : parent;
    };

    this.checkDirectCheckoutButtons = function(target) {
        return /\/checkout/.test(target.onclick && target.onclick.toString())
    };

    this.checkAddToCart = function(target) {
        if (target.closest('form[action="/cart/add"]')) return true;
    };

    this.zpPreventRedirect = function(target) {
        const condition = target.dataset.type === 'crm_dest'
            || target.dataset.zpProductRedirectLink === ''
            || target.dataset.zpAddToCart === ''
            || target.closest('[data-type="crm_dest"]')
            || target.closest('[data-zp-product-redirect-link]')
            || target.closest('[data-zp-add-to-cart]');

        if (condition) return true;
    };

    this.isOfferProduct = function() {
        return lqd.cart_variants_json.some(function(item) {
            return item.properties && item.properties._offer_id;
        });
    };

    this.addBuyXGetYDiscount = function(res) {
        var discounts = res.data.items.reduce(function(acc, variant) {
            if (!variant.discounts[0]) return acc;
            let item = {
                item_key: variant.key,
                discount: variant.discounts,
            };
            if (variant.line_level_discount_allocations[0]) item.discount_data = variant.line_level_discount_allocations;
            acc.push(item);
            return acc;
        }, []);

        if (discounts.length) res.data.per_item_discounts = discounts;
        return res;
    };

    this.isBuyNow = function(e) {
        const selectors = utils.store.get('classList');
        return e.target.classList.contains(selectors.buyNow) && !e.target.classList.contains(selectors.buyNowBranded);
    };
}

[Helpers, Integrations, Verify, Cart, PublicMethod, SkipCart, BuyNow].forEach(function(item) {
    Object.setPrototypeOf(item.prototype, Application.prototype);
});

const script = document.createElement('script');
document.head.appendChild(script);
script.src = ocuCdn + '/axios.min.js';
script.onload = function() {
    if (window.axios) return new Application();
    if (window.require) {
        require([ocuCdn + '/axios.min.js'], function(e) {
            window.axios = e;
            new Application();
        });
    }
};

function requireOptionSelectors() {
    if (window.Shopify && Shopify.OptionSelectors) return;

    const s = document.createElement('script');
    document.head.appendChild(s);
    s.src = OCUIncart.option_selection;
}

function Store() {
    var _private = {
        store: {
            ocuSelectors: '[name="checkout"], [href^="/checkout"], form[action^="/checkout"] [type="submit"], #checkout, [name="goto_pp"], .checkout_button, .checkout-button, [value="Checkout"], .cart-button-checkout',
            addToCartButton: '[name="add"]',
            proxy: '/apps/secure-checkout',
            lqdCart: '/upsellapp_cart',
            checkUpsells: '/check_upsells',
            neededCartFileds: ['token','note','attributes','items', 'currency', 'cart_level_discount_applications'],
            neededCartItemsFields: ['product_id','variant_id','quantity','grams','price','line_price','title','properties','vendor','sku','key'],
            permalink: /cart\/(\d+:\d+(?:,\d+:\d+)*)(?:[?&]discount=([-\w! %205]+))*/,
            isAddToCartClicked: false,
            cartChanged: false,
            cartUpdated: false,
            requirePayPal: false,
            checkoutButtonState: false,
            submitted: false,
            amazonPayInitiated: false,
            redirect_url: null,
            offer: null,
            offerDeclined: false,
            incarts: {},
            tags: [],
            isPermalinkHandling: false,
            cart_token: null,
            classList: {
                buyNow: 'shopify-payment-button__button',
                buyNowBranded: 'shopify-payment-button__button--branded'
            },
            params: {
                str: '',
                arr: []
            },
            fallback: {
                timeout: 15000,
                id: 0
            },
            XHR: {
                send: XMLHttpRequest.prototype.send
            }
        },
        event: function(e) {
            return new Event('store:' + e);
        },
        emit: function(e) {
            document.dispatchEvent(this.event(e));
        }
    };

    this.get = function(key) {
        return _private.store[key];
    };

    this.set = function(key, val) {
        if (!_private.store.hasOwnProperty(key)) return console.error('Unavailable key! ', key);
        _private.emit(key);
        _private.store[key] = val;
    };

    this.listen = function(e) {
        return new Promise(function(resolve) {
            document.addEventListener('store:' + e, resolve);
        });
    };
}

}();
</script>
{% endunless %}
